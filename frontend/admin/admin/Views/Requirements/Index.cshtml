@*@model IEnumerable<admin.ViewModels.RequirementVM>*@
@model PagedList.IPagedList<admin.ViewModels.RequirementVM>
@{
    ViewBag.Title = "Listagem de Requisitos";
}

<h4>Listagem de requisitos</h4>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active" aria-current="page">Requisitos</li>
    </ol>
</nav>

<div class="d-grid gap-2 d-md-flex justify-content-md-end">
    <button class="btn btn-outline-success me-md-2" type="button" onclick="location.href='@Url.Action("Create")'">Adicionar Requisito</button>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>
                Nomes
            </th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.HiddenFor(modelItem => item.RequirementId)
                    @Html.DisplayFor(modelItem => item.RequirementName)
                </td>
            </tr>
        }
        <tr>
            <td>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </td>
        </tr>
    </tbody>
</table>

<div>
    Página @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)
    of @Model.PageCount

    @if (Model.HasPreviousPage)
    {
        @Html.ActionLink("<<", "Index", new { pagina = 1, sortOrder = ViewBag.CurrentSort, currentFilter=ViewBag.CurrentFilter  })
        @Html.Raw(" ")
        ;
        @Html.ActionLink("< Anterior", "Index", new { pagina = Model.PageNumber - 1, sortOrder = ViewBag.CurrentSort, currentFilter=ViewBag.CurrentFilter  })
    }
    else
    {
        @:<<
        @Html.Raw(" ")
        ;
        @:< Anterior
    }

    @if (Model.HasNextPage)
    {      
        @Html.ActionLink("Próxima >", "Index", new { pagina = Model.PageNumber + 1, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, contador = 0 }, new { id = "proxima-link", data_contador = "" })            
        @Html.Raw(" ");
        @Html.ActionLink(">>", "Index", new { pagina = Model.PageCount, sortOrder = ViewBag.CurrentSort, currentFilter=ViewBag.CurrentFilter  })
    }
    else
    {
        @:Próxima >
        @Html.Raw(" ")
        @:>>
    }
</div>

<style>
    .btn-details {
        background-color: #007bff;
        border: none;
        padding: 8px 8px;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-details:hover {
            background-color: #0069d9;
        }
</style>

<script> 
    var contador = 0;
    function incrementarContador() {
        contador++;
        document.getElementById("contador").innerHTML = "Contador: " + contador;
        var proximaLink = document.getElementById("proxima-link");
        proximaLink.setAttribute("data-contador", contador);
    }
    var meuBotao = document.getElementById("meuBotao");
    meuBotao.addEventListener("click", incrementarContador);
    var proximaLink = document.getElementById("proxima-link");
    proximaLink.addEventListener("click", function (event) {
        var contadorAtual = proximaLink.getAttribute("data-contador");
        var href = proximaLink.getAttribute("href");
        href = href.split("?")[0] + "?pagina=" + (Model.PageNumber + 1) + "&sortOrder=" + ViewBag.CurrentSort + "&currentFilter=" + ViewBag.CurrentFilter + "&contador=" + contadorAtual;
        proximaLink.setAttribute("href", href);
    });
</script>